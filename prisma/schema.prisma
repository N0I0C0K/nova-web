// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTSQL_DATABASE_URL")
}

model Comment {
  id       Int      @id @default(autoincrement())
  content  String
  createAt DateTime @default(now())
  user_id  String
  post_id  Int
  author   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model Post {
  id       Int           @id @default(autoincrement())
  slug     String        @unique @default(cuid())
  title    String
  synopsis String
  badges   String[]
  createAt DateTime      @default(now())
  updateAt DateTime      @updatedAt
  user_id  String
  author   User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments Comment[]
  addition PostAddition?
  content  PostContent?
  Game     Game?
}

model PostContent {
  id       Int      @id @default(autoincrement())
  content  String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  post_id  Int      @unique
  post     Post?    @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model PostAddition {
  id        Int   @id @default(autoincrement())
  like      Int   @default(0)
  dislike   Int   @default(0)
  viewCount Int   @default(0)
  post_id   Int   @unique
  post      Post? @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model User {
  id          String      @id @default(cuid())
  name        String      @unique
  role        String
  description String
  avatarUrl   String?
  posts       Post[]
  comments    Comment[]
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  secure      UserSecure?
  games       Game[]
}

model UserSecure {
  id       Int      @id @default(autoincrement())
  user_id  String   @unique
  user     User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  email    String?
  phone    String?
  username String   @unique
  password String
  salt     String
  updateAt DateTime @updatedAt
}

model JoinForm {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  email        String
  phone        String
  introduction String
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model Game {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  post_id     Int?     @unique
  post        Post?    @relation(fields: [post_id], references: [id], onDelete: SetNull)
  badges      String[]
  itchUrl     String?
  imgUrl      String[]
  developers  User[]
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}
